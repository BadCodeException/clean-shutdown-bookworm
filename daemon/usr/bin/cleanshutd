#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

if [ $(grep -c "disable_cleanshutd=1" /boot/config.txt) -gt 0 ]; then
    echo "cleanshutd is disabled in /boot/config.txt" && exit 1
elif [ $(grep -c "daemon_active=0" /etc/cleanshutd.conf) -gt 0 ]; then
    echo "cleanshutd is disabled in /etc/cleanshutd.conf" && exit 1
else
    daemon="on"
fi

if [ -f /etc/cleanshutd.conf ]; then
    pin_value=$(grep "trigger_pin" /etc/cleanshutd.conf | cut -c 13-)
    led_value=$(grep "led_pin" /etc/cleanshutd.conf | cut -c 9-)
    poweroff_value=$(grep "poweroff_pin" /etc/cleanshutd.conf | cut -c 14-)
    hold_value=$(grep "hold_time" /etc/cleanshutd.conf | cut -c 11-)
    delay_value=$(grep "shutdown_delay" /etc/cleanshutd.conf | cut -c 16-)
    rate_value=$(grep "polling_rate" /etc/cleanshutd.conf | cut -c 14-)
    declare -i trigger_pin=$pin_value
    declare -i led_pin=$led_value
    declare -i poweroff_pin=$poweroff_value
    declare -i hold_time=$hold_value
    declare -i shutdown_delay=$delay_value
    declare -i polling_rate=$rate_value
else
    declare -i trigger_pin=4
    declare -i led_pin="off"
    declare -i poweroff_pin="off"
    declare -i hold_time=1
    declare -i shutdown_delay=0
    declare -i polling_rate=1
fi

if [ $shutdown_delay != 0 ]; then
    declare -i blink_time=$shutdown_delay
else
    declare -i blink_time=0.1
fi

if [ "$trigger_pin" != "$led_pin" ]; then
    raspi-gpio set $led_pin op dh
fi

raspi-gpio set $trigger_pin ip pu
declare -i pin_state=$(raspi-gpio get $trigger_pin | grep -c "level=0 fsel=0 func=INPUT")
echo "monitoring BCM $trigger_pin"

shutdown_trigger() {
    if [ $pin_state = 1 ]; then
        echo "BCM $trigger_pin asserted low"
        start=$SECONDS

        while [ $pin_state = 1 ]; do
            sleep 0.1
            low_time=`expr $SECONDS - $start`
            if [ $low_time -ge $hold_time ]; then
                break
            fi
        done
        echo "Held low for $low_time"

        if [ $low_time -ge $hold_time ]; then
            echo "BCM $trigger_pin held low" && return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

while true; do
    while [ $daemon = "on" ]; do
        if shutdown_trigger; then
            if [ "$led_pin" != "off" ] && [ "$led_pin" == "$trigger_pin" ]; then
                while [ $pin_state = 1 ]; do
                    sleep 0.5
                done
            fi

            msg="BCM $trigger_pin held low, system shutdown in $shutdown_delay minutes"
            echo $msg && wall $msg
            daemon="off" && shutdown -h +$shutdown_delay
            break
        fi
        sleep $polling_rate
    done

    while [ $daemon = "off" ]; do
        if [ "$led_pin" != "off" ]; then
            raspi-gpio set $led_pin op dl && sleep $blink_time
            raspi-gpio set $led_pin op dh && sleep 0.1
        fi
        if shutdown_trigger; then
            daemon="on" && shutdown -c
            break
        fi
        sleep $polling_rate
    done
done

exit 0
